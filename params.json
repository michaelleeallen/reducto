{
  "name": "Reducto",
  "tagline": "A small module that aims to reduce the amount of code needed to create APIs with a distributed back end in express.js",
  "body": "[![Build Status](https://travis-ci.org/michaelleeallen/reducto.png)](https://travis-ci.org/michaelleeallen/reducto) [![Code Climate](https://codeclimate.com/github/michaelleeallen/reducto/badges/gpa.svg)](https://codeclimate.com/github/michaelleeallen/reducto) [![devDependency Status](https://david-dm.org/michaelleeallen/reducto.svg)](https://david-dm.org/michaelleeallen/reducto)\r\n\r\nA lightweight configuration framework for express.js that aims to simplify creating API endpoints with\r\na distributed back-end. Reducto acts as an aggregator that allows you to declare routes and services in a straighforward,\r\neasy-to-scan way.\r\n\r\n\r\n\r\n\r\n## Installation\r\nReducto only provides configuration for express, so you will need to install express along with reducto:\r\n\r\n\tnpm install reducto express --save\r\n\r\n## Project Setup\r\n\r\nYou must provide both a routes and services config to reducto along with your express app, and reducto then parses your configuration and builds your express routes with all the configured middleware.\r\n\r\n```javascript\r\nconst express = require('express');\r\nconst reducto = require('reducto');\r\nconst app = express();\r\nconst routes = require('your_route_config.json');\r\nconst services = require('your_services_config.json');\r\n\r\nreducto(app, routes, services);\r\n\r\napp.listen(3000);\r\n```\r\n\r\n## Routes\r\n\r\nThe route configuration file lets you declare what endpoints you expose and what those endpoints do.\r\nRoutes can be configured to use middleware, views, fixtures and service calls. Middlware should be added in the order you want them to run.\r\n\r\n```json\r\n{\r\n  \"/my/route/:id\": {\r\n    \"GET\": [\r\n      { \"type\": \"middleware\", \"path\": \"./lib/middleware.js#myFuncName\" },\r\n      { \"type\": \"service\", \"name\": \"GET:myEndpoint\" },\r\n      { \"type\": \"fixture\", \"data\": {\r\n        \"title\": \"My awesome page title\"\r\n      }},\r\n      { \"type\": \"view\", \"name\": \"my-view\" }\r\n    ],\r\n    \"POST\": [\r\n      { \"type\": \"service\", \"name\": \"POST:myEndpoint\" },\r\n      { \"type\": \"transform\", \"path\": \"./lib/my-post-transform.js\" }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nEach route is defined by its URI pattern. This can be any legal express route pattern. Next you define\r\nthe HTTP methods per route. Each method has its own list of middleware configurations. These configurations are used to construct the middleware that is added to your express route.\r\n\r\n### Middleware Configuration Types\r\n\r\n#### middleware\r\n\r\n##### path\r\nThe path to the middleware file(with optional function name as *file.js#myFuncName*), or the name of any 3rd-party express middleware.\r\n\r\n#### service\r\n\r\n##### name\r\nThe name of service endpoint from your services config file.\r\n\r\n#### batch\r\n\r\n##### services\r\nA list of service middleware configurations that will be called as an asynchronous batch.\r\n\r\n#### fixture\r\n\r\n##### data\r\nA JSON object containing static data. This data is added to the cumulative `res.locals` object.\r\n\r\n#### view\r\n\r\n##### name\r\nThe name of a view to render with `res.render`. You must provide express with a rendering engine for this to work. See examples.\r\n\r\n\r\n## Services\r\n\r\nServices, or rather, service calls, represent any callable HTTP endpoint.\r\n\r\n**NOTE:** headers may contain the string `FROM_REQUEST` in order to pass header values from the request to the underlying service call.\r\n\r\n```json\r\n{\r\n  \"myEndpoint\": {\r\n    \"GET\": {\r\n      \"uri\": \"http://myws.com/api/someresource/{id}\",\r\n      \"headers\": {\r\n        \"Accepts\": \"application/xml\",\r\n        \"Authorization\": \"FROM_REQUEST\"\r\n      }\r\n    },\r\n    \"POST\": {\r\n      \"uri\": \"http://myws.com/api/someresource\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThe route config is using the express routing mechanism for parameters: `/my/route/:id`. This data can then be used in our service calls by\r\nplacing a corresponding URI token in the service definition: `http://myws.com/api/someresource/{id}` where `{id}`\r\nwill map to `:id`. Query params, routes params, request body, and data returned from previous service calls can all be used to pass data to the service call.\r\n\r\nService calls use the [request](https://github.com/mikeal/request) module to handle HTTP, so any valid configuration for\r\n**request** applies here.\r\n\r\n## Examples\r\n\r\nNavigate to the root directory and run `npm start`. This will start the example app at\r\n`http://localhost:3000`. You can view the example page by pointing your browser to `http://localhost:3000/local/:zipcode`\r\nwhere `:zipcode` is any valid zip. All example code can be found in the `/examples` directory.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}